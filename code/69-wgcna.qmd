---
title: "69 exon expression WGCNA"
author: Ariana Huffmyer 
date: "`r format(Sys.time(), '%d %B, %Y')`" 
output: 
  html_document:
    theme: readable
    highlight: zenburn
    toc: true
    toc_float: true
    number_sections: true
    code_folding: show
    code_download: true
  # github_document:
  #   toc: true
  #   toc_depth: 3
  #   number_sections: true
  #   html_preview: true
editor_options: 
  chunk_output_type: console
---

```{r}
library(BiocManager)
#BiocManager::install("WGCNA")
```


```{r setup, include=FALSE}
#library(kableExtra)
# library(DESeq2)
# library(pheatmap)
# library(RColorBrewer)
# library(data.table)
#library(DT)
# library(Biostrings)
#library(methylKit)
library(WGCNA)
library(data.table) # for data manipulation
library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,         # Display code chunks
  eval = TRUE,         # Evaluate code chunks
  warning = TRUE,     # Hide warnings
  message = TRUE,     # Hide messages
  fig.width = 6,       # Set plot width in inches
  fig.height = 4,      # Set plot height in inches
  fig.align = "center" # Align plots to the center
)
```

# Read in data 

Read in data that now has sample_fold# in rows and genes in columns with values representing fold change from the first exon relative to each subsequent exon.  

Running for just females for now.  
```{r}
#setwd("Projects/ceabigr")

#datExpr <- fread("output/68-female-exon-fold/logfc.txt")
datExpr <- fread("output/72-exon-data-rfmt/female_exon_tf.csv")
```

use this if genes are in rows
```{r}
#rownames(datExpr) <- datExpr$GeneID
#names(datExpr)
#genes<-datExpr$GeneID

#datExpr <- datExpr[ , -1, with = FALSE]

#result_vector <- genes[!grepl("^L", genes, ignore.case = TRUE)]
#genes <- genes[genes != "GeneID"]
```

Transpose to put "samples" or exon in rows and genes in columns. Put gene ID in row names. 
```{r}
#datExpr <- t(datExpr) 

#datExpr<-as.data.frame(datExpr)

#names(datExpr)<-genes

#str(datExpr)

#datExpr[] <- lapply(datExpr, as.numeric)

#names(datExpr)<-genes
```

Set row names and remove character column. 
```{r}
rownames(datExpr) <- datExpr$SampleID_fold
sample_vector<-datExpr$SampleID_fold
datExpr <- datExpr[ , -1, with = FALSE]
```

Remove rows that are a sum of 0. These are the fold 1 rows.  
```{r}
# Find rows with sum not equal to 0
nonZeroSumRows <- rowSums(datExpr, na.rm=TRUE) != 0

# Subset the matrix using logical indexing
datExpr <- datExpr[nonZeroSumRows, ]
```

Remove columns that have na's (removed genes not present in every sample).  
```{r}
datExpr<-datExpr %>%
    select_if(~ !any(is.na(.)))
```
We had 13,280 genes before, and now have 11,270 genes. 

Choose a soft power. 
```{r}
powers = c(1:35)
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
plot(sft$fitIndices[,1], sft$fitIndices[,3], pch = 19, xlab="Soft Threshold (power)", ylab="scale free topology model fit", type="n")
text(sft$fitIndices[,1], sft$fitIndices[,3], labels=powers, cex=0.5)
abline(h = 0.9, col = "red")

```

It's having a problem estimating variance to generate the soft powers... We will have to return to this if we use this approach. 

# Blockwise modules network construction 

Run blockwise modules with a signed network. 
``` {r, echo=TRUE, warning=FALSE, message=FALSE}

picked_power =  10
temp_cor <- cor       
cor <- WGCNA::cor                                             # Force it to use WGCNA cor function (fix a namespace conflict issue)
netwk <- blockwiseModules(datExpr,                         # <= input here

                          # == Adjacency Function ==
                          power = picked_power,               # <= power here
                          networkType = "signed",

                          # == Tree and Block Options ==
                          deepSplit = 2,
                          pamRespectsDendro = F,
                          # detectCutHeight = 0.75,
                          minModuleSize = 1000,                  
                          maxBlockSize = 10000,

                          # == Module Adjustments ==
                          mergeCutHeight = 0.05,
                          reassignThreshold = 1e-6,
                          minCoreKME = 0.5,
                          minKMEtoStay = 0.3,

                          # == TOM == Archive the run results in TOM file (saves time) but it doesn't save a file
                          saveTOMs = F,
                          saveTOMFileBase = "ER",

                          # == Output Options
                          numericLabels = T,
                          verbose = 3)

cor <- temp_cor     # Return cor function to original namespace

# Identify labels as numbers 
mergedColors = netwk$colors
# Plot the dendrogram and the module colors underneath

table(mergedColors)

membership<-as.data.frame(mergedColors)

membership$gene<-rownames(membership)

names(membership)<-c("module", "gene")
```

# Plot module eigengene level

Next plot eigengene levels 
```{r}
#Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = mergedColors, softPower = 8)
MEs = MEList$eigengenes

ncol(MEs) #How many modules do we have now?

table(mergedColors)
table<-as.data.frame(table(mergedColors))
table
```

The table shows number of genes in each module.

2/27 attempt: 
  mergedColors Freq
1            0 5520
2            1 3511
3            2 2239

The fact that there are only two modules that show a pattern (0 means those genes didn't fit into a pattern) is weird to me... 

Previous attempt:  

mergedColors Freq
1             0  713
2             1 3076
3             2 2926
4             3 2471
5             4 2115
6             5 2031
7             6 1854
8             7 1819
9             8 1810
10            9 1774
11           10 1680
12           11 1504
13           12 1474
14           13 1313

Plot module expression across exon location. 
```{r}
head(MEs)
names(MEs)
Strader_MEs <- MEs
#Strader_MEs$exon <- c("2", "3", "4", "5", "6")
cleaned_vector <- sample_vector[!grepl("fold1", sample_vector)]
Strader_MEs$sample <- cleaned_vector
head(Strader_MEs)

Strader_MEs <- separate(Strader_MEs, col = sample, into = c("sample", "fold"), sep = "_", remove = FALSE)
head(Strader_MEs)
```

```{r}
plot_MEs<-Strader_MEs%>%
  gather(., key="Module", value="Mean", ME0:ME2)
```

First, assign treatment by sample ID. 
```{r}
meta<-read_csv("data/adult-meta.csv")

plot_MEs$treatment<-meta$Treatment[match(plot_MEs$sample, meta$OldSample.ID)]
```

Plot module expression across exon location. 
```{r}
library(ggplot2)
library(tidyverse)

expression_plot<-plot_MEs%>%
  group_by(Module, fold) %>%
  
  ggplot(aes(x=fold, y=Mean, color=treatment)) +
  facet_wrap(~Module)+
  geom_hline(yintercept = 0, linetype="dashed", color = "grey")+
  geom_point() +
  scale_color_manual(values=c("gray", "darkred"))+
  #geom_line(group=1)+
  #ylim(-0.5,1) +
  ylab("Mean Module Eigenegene") +
  xlab("Exon fold change")+
  theme_classic()+
  theme(panel.border = element_rect(fill=NA)); expression_plot

ggsave(plot=expression_plot, filename="output/69-wgcna/module-expression.png", width=10, height=6)
```

It looks like Module 0 is genes that peak in the middle (exon 3-4); Module 1 are genes that have higher expression of earlier exons (exon 2-3) and Module 2 are genes that increase with higher expression of later exons (exons 5-6). 

AH LEFT OFF HERE - next need to figure out which genes are in which module for which sample :) 

























Identify modules that have only  1 instance of a gene (if we see only 1 instance in a treatment x sample combination, that means a gene moved between modules by treatment). 

```{r}
# Extract the substring before the underscore in the gene column
membership <- membership %>%
  mutate(gene_prefix = str_extract(gene, "^[^_]+"))

# Identify duplicate gene prefixes within the same module
unique_within_module <- membership %>%
  group_by(module, gene_prefix) %>%
  filter(n() == 1) %>%
  arrange(module, gene_prefix)

unique_within_module

length(unique(unique_within_module$gene_prefix))
```
All genes are different by treatment. I'm not sure if this makes sense... 

```{r}
# Identify duplicate gene prefixes within the same module
same_within_module <- membership %>%
  group_by(module, gene_prefix) %>%
  filter(n() == 2) %>%
  arrange(module, gene_prefix)

same_within_module

length(unique(same_within_module$gene_prefix))
```
There are 0 genes that are in the same module by treatment. 

Number of unique genes in module 0. 
```{r}
test<-membership%>%
  filter(module==0)

length(unique(test$gene_prefix))
```
703 unique genes 

# Overlay plot of every individual gene expression level over the module mean 
In the plot below, adjust "target_module", and "target_module2" to include the module number you are interested in. 

Module 0 
```{r}
target_module<-0
target_genes<-membership%>%filter(module==target_module)%>%select(gene)
target_genes<-unique(target_genes$gene)

# Select columns in datExpr that match any item in target_genes
selected_data <- datExpr[, colnames(datExpr) %in% target_genes, drop = FALSE]
selected_data$exon<-c("2", "3", "4", "5", "6")

selected_data<-selected_data %>%
               pivot_longer(cols = -exon, 
               names_to = "gene", 
               values_to = "value")%>%
  
  #add color for exposed vs control 
  mutate(treatment = ifelse(grepl("exp", gene, ignore.case = TRUE), "exposed", "control"))

#add in mean module expression value from module dataframe
target_module2<-"ME0"
selected_module<-plot_MEs%>%
  filter(Module==target_module2)

target_plot<-ggplot() +
  ggtitle(paste("Module ", target_module))+
  geom_hline(yintercept = 0, linetype="dashed", color = "grey")+
  geom_line(data=selected_data, aes(x=exon, y=value, group=gene, color=treatment))+
  geom_point(data=selected_data, aes(x=exon, y=value, color=treatment)) +
  
  geom_line(data=selected_module, aes(x=exon, y=Mean, group=1), color="black", size=2)+
  geom_point(data=selected_module, aes(x=exon, y=Mean), color="black", size=4) +
  
  scale_color_manual(values=c("gray", "red"), name="Treatment")+
  
  #ylim(-5,5) +
  ylab("Mean Expression Relative to Exon 1") +
  xlab("Exon")+
  theme_classic(); target_plot

ggsave(plot=target_plot, filename="output/69-wgcna/genes-module0.png", width=6, height=6)
```

```{r}
target_module<-1
target_genes<-membership%>%filter(module==target_module)%>%select(gene)
target_genes<-unique(target_genes$gene)

# Select columns in datExpr that match any item in target_genes
selected_data <- datExpr[, colnames(datExpr) %in% target_genes, drop = FALSE]
selected_data$exon<-c("2", "3", "4", "5", "6")

selected_data<-selected_data %>%
               pivot_longer(cols = -exon, 
               names_to = "gene", 
               values_to = "value")%>%
  
  #add color for exposed vs control 
  mutate(treatment = ifelse(grepl("exp", gene, ignore.case = TRUE), "exposed", "control"))

#add in mean module expression value from module dataframe
target_module2<-"ME1"
selected_module<-plot_MEs%>%
  filter(Module==target_module2)

target_plot<-ggplot() +
  ggtitle(paste("Module ", target_module))+
  geom_hline(yintercept = 0, linetype="dashed", color = "grey")+
  geom_line(data=selected_data, aes(x=exon, y=value, group=gene, color=treatment))+
  geom_point(data=selected_data, aes(x=exon, y=value, color=treatment)) +
  
  geom_line(data=selected_module, aes(x=exon, y=Mean, group=1), color="black", size=2)+
  geom_point(data=selected_module, aes(x=exon, y=Mean), color="black", size=4) +
  
  scale_color_manual(values=c("gray", "red"), name="Treatment")+
  
  #ylim(-5,5) +
  ylab("Mean Expression Relative to Exon 1") +
  xlab("Exon")+
  theme_classic(); target_plot

ggsave(plot=target_plot, filename="output/69-wgcna/genes-module1.png", width=6, height=6)
```

You can add any other modules here you are interested in! 

# View genes that change modules 

Extract genes that are in module 0 in control and module NOT 0 when exposed. Look at the values for these genes colored by treatment. 
```{r}
control_module<-0
treatment_module<-1

interest_genes<-membership%>%
  mutate(treatment = ifelse(grepl("exp", gene, ignore.case = TRUE), "exposed", "control"))%>%
  arrange(gene_prefix)%>%
  select(module, gene_prefix, treatment)

rownames(interest_genes)<-NULL

interest_genes<-interest_genes%>%
  pivot_wider(names_from=treatment, values_from=module)%>%
  filter(control==control_module & exposed==treatment_module)

interest_genes<-interest_genes$gene_prefix
length(interest_genes)
```


```{r}
interest_genes
```







```{r}
#select columns that contain the gene prefix 
selected_columns <- datExpr %>%
  select(matches(paste(interest_genes, collapse = "|")))

length(selected_columns)
#should be double the length(interest_genes) above 

selected_columns$exon<-c("2", "3", "4", "5", "6")

selected_columns<-selected_columns %>%
               pivot_longer(cols = -exon, 
               names_to = "gene", 
               values_to = "value")%>%
  
  #add color for exposed vs control 
  mutate(treatment = ifelse(grepl("exp", gene, ignore.case = TRUE), "exposed", "control"))

#plot expression patterns by treatment 
target_plot<-ggplot(data=selected_columns, aes(color=treatment, x=exon, y=value)) +
  ggtitle(paste("Module", control_module, "to Module ", treatment_module))+
  geom_hline(yintercept = 0, linetype="dashed", color = "grey")+
  geom_line(aes(group=gene))+
  geom_point() +
  scale_color_manual(values=c("gray", "red"), name="Treatment")+
  #ylim(-5,5) +
  ylab("Mean Expression Relative to Exon 1") +
  xlab("Exon")+
  theme_classic(); target_plot

ggsave(plot=target_plot, filename="output/69-wgcna/genes-module0-module1-treatment.png", width=6, height=6)
```

# Next read in and plot sample-level data for these genes rather than averaged data. 