---
title: "75 max transcript enrichment"
author: Steven Roberts
date: "`r format(Sys.time(), '%d %B, %Y')`" 
output: 
  html_document:
    theme: readable
    highlight: zenburn
    toc: true
    toc_float: true
    number_sections: true
    code_folding: show
    code_download: true
  # github_document:
  #   toc: true
  #   toc_depth: 3
  #   number_sections: true
  #   html_preview: true
---

In this document, I'll take information about changes in the maximum number of transcripts expressed and investigate 1) the significance of these changes, 2) functions associated with these changes and 3) determine if there are any overrepresented biological processes associated with changes

# Set up R Markdown document

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,         # Display code chunks
  eval = TRUE,         # Evaluate code chunks
  warning = TRUE,     # Hide warnings
  message = TRUE,     # Hide messages
  fig.width = 6,       # Set plot width in inches
  fig.height = 4,      # Set plot height in inches
  fig.align = "center" # Align plots to the center
)

knitr::opts_knit$set(root.dir = normalizePath("../output/75-max-transcript-enrichment/")) #Set root directory
```

```{r}
getwd()
```

# Install packages

```{r setup, include=FALSE}
# if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
# if ("ggpubr" %in% rownames(installed.packages()) == 'FALSE') install.packages('ggpubr')
# if ("data.table" %in% rownames(installed.packages()) == 'FALSE') install.packages('data.table')
# if ("RColorBrewer" %in% rownames(installed.packages()) == 'FALSE') install.packages('RColorBrewer')
# if ("patchwork" %in% rownames(installed.packages()) == 'FALSE') install.packages('patchwork')
```

```{r}
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("topGO")
```

```{r}
require(tidyverse)
require(ggpubr)
require(data.table)
require(RColorBrewer)
require(patchwork)
require(topGO)
```

```{r}
sessionInfo()
```

# Import data

```{r}
metadata <- read.csv("../../data/adult-meta.csv", header = TRUE) %>%
  dplyr::rename(., sample = Sample.ID) %>%
  dplyr::rename(., treatment = Treatment) %>%
  mutate(., treatment = gsub(treatment, pattern = "Control", replacement = "control")) %>%
  mutate(., treatment = gsub(treatment, pattern = "Exposed", replacement = "exposed")) #Import metadata. Change column name and contents to be consistent throughout script
head(metadata)
```

## Maximum transcript data

```{r}
female_tr <- read_csv("../34-transcript-counts/diffs.max.transcripts_per_gene.controls_females.vs.exposed_females.csv") #Import transcript count data per gene
head(female_tr) #Confirm import
```

```{r}
male_tr <- read_csv("../34-transcript-counts/diffs.max.transcripts_per_gene.controls_males.vs.exposed_males.csv") #Import transcript count data per gene
head(male_tr) #Confirm import
```

## Methylation data

```{r}
geneMethylation <- read.csv("../40-gene-methylaiton.csv", header = TRUE, row.names = 2)
geneMethylationMod <- geneMethylation %>%
  dplyr::select(., -1) #Remove extra column
head(geneMethylationMod)
```

```{r}
geneMethylationFem <- geneMethylationMod %>%
  filter(., grepl("F", rownames(.), fixed = TRUE)) %>% 
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name") %>%
  pivot_longer(., !gene_name, names_to = "sample", values_to = "meth") %>%
  mutate(., gene_name = gsub(pattern = "gene.", replacement = "", gene_name)) %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, meth, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_meth = mean(meth, na.rm = TRUE)) %>%
  ungroup(.) #Filter female samples and reformat data. Remove excess information from gene name column. Add treatment information and average methylation for each gene by treatment.
head(geneMethylationFem) #Confirm formatting. Resultant df has one line per gene/treatment.
```

```{r}
geneMethylationMale <- geneMethylationMod %>%
  filter(., grepl("M", rownames(.), fixed = TRUE)) %>% 
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name")  %>%
  pivot_longer(., !gene_name, names_to = "sample", values_to = "meth") %>%
  mutate(., gene_name = gsub(pattern = "gene.", replacement = "", gene_name)) %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, meth, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_meth = mean(meth, na.rm = TRUE)) %>%
  ungroup(.) #Filter male samples and reformat data. Remove excess information from gene name column. Add treatment information and average methylation for each gene by treatment.
head(geneMethylationMale) #Confirm formatting
```

```{r}
DMLLocationsFemale <- read.delim("../DML-characterization/female_dml-Gene-wb.bed", sep = "\t", header = FALSE, col.names = c("chr", "start", "end", "f_DML", "meth.diff", "gene.chr", "Gnomon", "gene", "gene.start", "gene.end", "V11", "strand", "V13", "V14")) %>%
  dplyr::select(., "chr", "start", "end", "meth.diff", "gene.start", "gene.end", "V14") %>%
  separate(., col = V14, into = c("gene_name", "misc"), sep = ";Dbxref=GeneID:") %>%
  dplyr::select(., -misc) %>%
  mutate(., gene_name = gsub(pattern = "ID=gene-", replacement = "", x = gene_name)) #Import bedfile with DML locations in genes with gene ID annotations. Rename columns as file is imported then select columns of interest. Separate gene ID annotation information from misc information, and remove misc column. Remove extra information before gene ID
head(DMLLocationsFemale) #Confirm file import and changes
```

```{r}
DMLLocationsMale <- read.delim("../DML-characterization/male_dml-Gene-wb.bed", sep = "\t", header = FALSE, col.names = c("chr", "start", "end", "f_DML", "meth.diff", "gene.chr", "Gnomon", "gene", "gene.start", "gene.end", "V11", "strand", "V13", "V14")) %>%
  dplyr::select(., "chr", "start", "end", "meth.diff", "gene.start", "gene.end", "V14") %>%
  separate(., col = V14, into = c("gene_name", "misc"), sep = ";Dbxref=GeneID:") %>%
  dplyr::select(., -misc) %>%
  mutate(., gene_name = gsub(pattern = "ID=gene-", replacement = "", x = gene_name)) #Import bedfile with DML locations in genes with gene ID annotations. Rename columns as file is imported then select columns of interest. Separate gene ID annotation information from misc information, and remove misc column. Remove extra information before gene ID
head(DMLLocationsMale) #Confirm file import and changes
```

## Expression data

```{r}
metadata
```


```{r}
geneExpression <- read.csv("../../data/gene_fpkm.csv", header = TRUE, row.names = metadata$sample)
geneExpressionMod <- geneExpression %>%
  dplyr::select(., -c(1:6)) #Remove extra information to have just FPKM for each gene
head(geneExpressionMod)
```

```{r}
geneExpressionFem <- geneExpressionMod %>%
  filter(., grepl("F", rownames(.), fixed = TRUE)) %>%
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name")  %>%
  pivot_longer(., cols = !gene_name, names_to = "sample", values_to = "exp") %>% 
  mutate(., gene_name = gsub("gene.", "", gene_name))  %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, exp, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_exp = mean(exp, na.rm = TRUE)) %>%
  ungroup(.) #Filter female samples and reformat data. Remove excess information from gene name column. Add treatment information and average expression for each gene by treatment.
head(geneExpressionFem) #Confirm formatting
```

```{r}
geneExpressionFem %>%
  filter(., avg_exp != 0) %>%
  dplyr::select(., gene_name) %>%
  distinct(.) %>% nrow(.)
```

```{r}
geneExpressionMale <- geneExpressionMod %>%
  filter(., grepl("M", rownames(.), fixed = TRUE)) %>%
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name")  %>%
  pivot_longer(., !gene_name, names_to = "sample", values_to = "exp") %>% 
  mutate(., gene_name = gsub("gene.", "", gene_name)) %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, exp, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_exp = mean(exp, na.rm = TRUE)) %>%
  ungroup(.) #Filter male samples and reformat data. Remove excess information from gene name column. Add treatment information and average expression for each gene by treatment.
head(geneExpressionMale) #Confirm formatting
```

```{r}
geneExpressionMale %>%
  filter(., avg_exp != 0) %>%
  dplyr::select(., gene_name) %>%
  unique(.) %>% nrow(.)
```

