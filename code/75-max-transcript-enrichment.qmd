---
title: "75 max transcript enrichment"
author: Steven Roberts
date: "`r format(Sys.time(), '%d %B, %Y')`" 
output: 
  html_document:
    theme: readable
    highlight: zenburn
    toc: true
    toc_float: true
    number_sections: true
    code_folding: show
    code_download: true
  # github_document:
  #   toc: true
  #   toc_depth: 3
  #   number_sections: true
  #   html_preview: true
---

In this document, I'll take information about changes in the maximum number of transcripts expressed and investigate 1) the significance of these changes, 2) functions associated with these changes and 3) determine if there are any overrepresented biological processes associated with changes

# Set up R Markdown document

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,         # Display code chunks
  eval = TRUE,         # Evaluate code chunks
  warning = TRUE,     # Hide warnings
  message = TRUE,     # Hide messages
  fig.width = 6,       # Set plot width in inches
  fig.height = 4,      # Set plot height in inches
  fig.align = "center" # Align plots to the center
)

knitr::opts_knit$set(root.dir = normalizePath("../output/75-max-transcript-enrichment/")) #Set root directory
```

```{r}
getwd()
```

# Install packages

```{r setup, include=FALSE}
# if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
# if ("ggpubr" %in% rownames(installed.packages()) == 'FALSE') install.packages('ggpubr')
# if ("data.table" %in% rownames(installed.packages()) == 'FALSE') install.packages('data.table')
# if ("RColorBrewer" %in% rownames(installed.packages()) == 'FALSE') install.packages('RColorBrewer')
# if ("patchwork" %in% rownames(installed.packages()) == 'FALSE') install.packages('patchwork')
```

```{r}
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("topGO")
```

```{r}
require(tidyverse)
require(ggpubr)
require(data.table)
require(RColorBrewer)
require(patchwork)
require(topGO)
```

```{r}
sessionInfo()
```

# Import data

```{r}
metadata <- read.csv("../../data/adult-meta.csv", header = TRUE) %>%
  dplyr::rename(., sample = Sample.ID) %>%
  dplyr::rename(., treatment = Treatment) %>%
  mutate(., treatment = gsub(treatment, pattern = "Control", replacement = "control")) %>%
  mutate(., treatment = gsub(treatment, pattern = "Exposed", replacement = "exposed")) #Import metadata. Change column name and contents to be consistent throughout script
head(metadata)
```

## Maximum transcript data

```{r}
female_tr <- read.csv("../../supplemental-files/01.01-fmcoe-max-predom-isos-gene_fpkm.csv") %>%
  dplyr::select(., c(1:2,4)) %>%
  mutate(., difference = females_exposed_max_transcript_counts - females_controls_max_transcript_counts) #Import transcript count data per gene. Select only the data for females. Create a difference column for exposed vs. control
nrow(female_tr)
head(female_tr)
```

```{r}
male_tr <- read.csv("../../supplemental-files/01.01-fmcoe-max-predom-isos-gene_fpkm.csv") %>%
  dplyr::select(., c(1,3,5)) %>%
  mutate(., difference = males_exposed_max_transcript_counts - males_controls_max_transcript_counts) #Import transcript count data per gene. Select only the data for females. Create a difference column for exposed vs. control
head(male_tr) #Confirm import
```

## Methylation data

```{r}
geneMethylation <- read.csv("../40-gene-methylaiton.csv", header = TRUE, row.names = 2)
geneMethylationMod <- geneMethylation %>%
  dplyr::select(., -1) #Remove extra column
head(geneMethylationMod)
```

```{r}
geneMethylationFem <- geneMethylationMod %>%
  filter(., grepl("F", rownames(.), fixed = TRUE)) %>% 
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name") %>%
  pivot_longer(., !gene_name, names_to = "sample", values_to = "meth") %>%
  mutate(., gene_name = gsub(pattern = "gene.", replacement = "", gene_name)) %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, meth, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_meth = mean(meth, na.rm = TRUE)) %>%
  ungroup(.) #Filter female samples and reformat data. Remove excess information from gene name column. Add treatment information and average methylation for each gene by treatment.
head(geneMethylationFem) #Confirm formatting. Resultant df has one line per gene/treatment.
```

```{r}
geneMethylationFemWide <- geneMethylationFem %>%
  pivot_wider(., names_from = treatment, names_prefix = "avg_meth_", values_from = avg_meth) %>%
  replace(is.na(.), 0) %>%
  mutate(., change_meth = avg_meth_exposed - avg_meth_control) #Pivot dataaframe wider and calculate change in gene methylation
head(geneMethylationFemWide)
```

```{r}
geneMethylationMale <- geneMethylationMod %>%
  filter(., grepl("M", rownames(.), fixed = TRUE)) %>% 
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name")  %>%
  pivot_longer(., !gene_name, names_to = "sample", values_to = "meth") %>%
  mutate(., gene_name = gsub(pattern = "gene.", replacement = "", gene_name)) %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, meth, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_meth = mean(meth, na.rm = TRUE)) %>%
  ungroup(.) #Filter male samples and reformat data. Remove excess information from gene name column. Add treatment information and average methylation for each gene by treatment.
head(geneMethylationMale) #Confirm formatting
```

```{r}
geneMethylationMaleWide <- geneMethylationMale %>%
  pivot_wider(., names_from = treatment, names_prefix = "avg_meth_", values_from = avg_meth) %>%
  replace(is.na(.), 0) %>%
  mutate(., change_meth = avg_meth_exposed - avg_meth_control) #Pivot dataaframe wider and calculate change in gene methylation
head(geneMethylationMaleWide)
```

```{r}
DMLLocationsFemale <- read.delim("../DML-characterization/female_dml-Gene-wb.bed", sep = "\t", header = FALSE, col.names = c("chr", "start", "end", "f_DML", "meth.diff", "gene.chr", "Gnomon", "gene", "gene.start", "gene.end", "V11", "strand", "V13", "V14")) %>%
  dplyr::select(., "chr", "start", "end", "meth.diff", "gene.start", "gene.end", "V14") %>%
  separate(., col = V14, into = c("gene_name", "misc"), sep = ";Dbxref=GeneID:") %>%
  dplyr::select(., -misc) %>%
  mutate(., gene_name = gsub(pattern = "ID=gene-", replacement = "", x = gene_name)) #Import bedfile with DML locations in genes with gene ID annotations. Rename columns as file is imported then select columns of interest. Separate gene ID annotation information from misc information, and remove misc column. Remove extra information before gene ID
head(DMLLocationsFemale) #Confirm file import and changes
```

```{r}
DMLLocationsMale <- read.delim("../DML-characterization/male_dml-Gene-wb.bed", sep = "\t", header = FALSE, col.names = c("chr", "start", "end", "f_DML", "meth.diff", "gene.chr", "Gnomon", "gene", "gene.start", "gene.end", "V11", "strand", "V13", "V14")) %>%
  dplyr::select(., "chr", "start", "end", "meth.diff", "gene.start", "gene.end", "V14") %>%
  separate(., col = V14, into = c("gene_name", "misc"), sep = ";Dbxref=GeneID:") %>%
  dplyr::select(., -misc) %>%
  mutate(., gene_name = gsub(pattern = "ID=gene-", replacement = "", x = gene_name)) #Import bedfile with DML locations in genes with gene ID annotations. Rename columns as file is imported then select columns of interest. Separate gene ID annotation information from misc information, and remove misc column. Remove extra information before gene ID
head(DMLLocationsMale) #Confirm file import and changes
```

## Expression data

```{r}
geneExpression <- read.csv("../../data/gene_fpkm.csv", header = TRUE, row.names = metadata$sample)
geneExpressionMod <- geneExpression %>%
  dplyr::select(., -c(1:6)) #Remove extra information to have just FPKM for each gene
head(geneExpressionMod)
```

```{r}
geneExpressionFem <- geneExpressionMod %>%
  filter(., grepl("F", rownames(.), fixed = TRUE)) %>%
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name")  %>%
  pivot_longer(., cols = !gene_name, names_to = "sample", values_to = "exp") %>% 
  mutate(., gene_name = gsub("gene.", "", gene_name))  %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, exp, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_exp = mean(exp, na.rm = TRUE)) %>%
  ungroup(.) #Filter female samples and reformat data. Remove excess information from gene name column. Add treatment information and average expression for each gene by treatment.
head(geneExpressionFem) #Confirm formatting
```

```{r}
geneExpressionFem %>%
  filter(., avg_exp != 0) %>%
  dplyr::select(., gene_name) %>%
  distinct(.) %>% nrow(.)
```

```{r}
geneExpressionFemWide <- geneExpressionFem %>%
  pivot_wider(., names_from = treatment, names_prefix = "avg_exp_", values_from = avg_exp) %>%
  replace(is.na(.), 0) %>%
  mutate(., change_exp = avg_exp_exposed - avg_exp_control) #Pivot dataaframe wider and calculate change in gene Expression
head(geneExpressionFemWide)
```

```{r}
geneExpressionMale <- geneExpressionMod %>%
  filter(., grepl("M", rownames(.), fixed = TRUE)) %>%
  t(.) %>%
  as.data.frame(.) %>%
  drop_na(.) %>%
  as.data.frame(.) %>% 
  rownames_to_column(., var = "gene_name")  %>%
  pivot_longer(., !gene_name, names_to = "sample", values_to = "exp") %>% 
  mutate(., gene_name = gsub("gene.", "", gene_name)) %>%
  left_join(., metadata, by = "sample") %>%
  dplyr::select(., c(gene_name, exp, treatment)) %>%
  dplyr::group_by(gene_name, treatment) %>%
  summarise(avg_exp = mean(exp, na.rm = TRUE)) %>%
  ungroup(.) #Filter male samples and reformat data. Remove excess information from gene name column. Add treatment information and average expression for each gene by treatment.
head(geneExpressionMale) #Confirm formatting
```

```{r}
geneExpressionMale %>%
  filter(., avg_exp != 0) %>%
  dplyr::select(., gene_name) %>%
  unique(.) %>% nrow(.)
```

```{r}
geneExpressionMaleWide <- geneExpressionMale %>%
  pivot_wider(., names_from = treatment, names_prefix = "avg_exp_", values_from = avg_exp) %>%
  replace(is.na(.), 0) %>%
  mutate(., change_exp = avg_exp_exposed - avg_exp_control) #Pivot dataaframe wider and calculate change in gene Expression
head(geneExpressionMaleWide)
```

# Females

## Maximum transcript change

```{r}
nrow(female_tr) #39104 genes total
sum(female_tr$difference > 0) #1529 genes with more transcripts expressed in exposed
sum(female_tr$difference == 0) #35048
sum(female_tr$difference < 0) #2437 genes with less transcripts expressed in exposed
sum(female_tr$difference > 0) / nrow(female_tr) * 100 #3.92% of genes have more transcripts expressed in exposed
sum(female_tr$difference == 0) / nrow(female_tr) * 100 #89.83% of genes have more transcripts expressed in exposed
sum(female_tr$difference < 0) / nrow(female_tr) * 100 #6.25% of genes have less transcripts expressed in exposed
```

```{r}
maxTransIncFemTest <- prop.test(x = 1529, n = 39104, p = 0.33,
                             alternative = "two.sided", 
                             conf.level = 0.95) #Conduct a 1-sample z test
maxTransIncFemTest
maxTransIncFemTest$statistic #X-squared = 14965
maxTransIncFemTest$p.value #p = 0. Increases in max transcripts happen significantly less than what would be expected by random chance
```

```{r}
maxTransDecFemTest <- prop.test(x = 2437, n = 39104, p = 0.33,
                             alternative = "two.sided", 
                             conf.level = 0.95) #Conduct a 1-sample z test
maxTransDecFemTest
maxTransDecFemTest$statistic #X-squared = 12671.25
maxTransDecFemTest$p.value #p = 0. Decreases in max transcripts happen significantly less than what would be expected by random chance
```

## Format data

I want to add methylation and expression data to the maximum transcript data.

# Males

## Maximum transcript change

```{r}
nrow(male_tr) #39104 genes total
sum(male_tr$difference > 0) #3123 genes with more transcripts expressed in exposed
sum(male_tr$difference == 0) #34687
sum(male_tr$difference < 0) #1204 genes with less transcripts expressed in exposed
sum(male_tr$difference > 0) / nrow(male_tr) * 100 #8.00% of genes have more transcripts expressed in exposed
sum(male_tr$difference == 0) / nrow(male_tr) * 100 #88.9% of genes have more transcripts expressed in exposed
sum(male_tr$difference < 0) / nrow(male_tr) * 100 #3.09% of genes have less transcripts expressed in exposed
```

```{r}
maxTransIncMaleTest <- prop.test(x = 3123, n = 39104, p = 0.33,
                             alternative = "two.sided", 
                             conf.level = 0.95) #Conduct a 1-sample z test
maxTransIncMaleTest
maxTransIncMaleTest$statistic #X-squared = 11064.72
maxTransIncMaleTest$p.value #p = 0. Increases in max transcripts happen significantly less than what would be expected by random chance
```

```{r}
maxTransDecMaleTest <- prop.test(x = 1204, n = 39104, p = 0.33,
                             alternative = "two.sided", 
                             conf.level = 0.95) #Conduct a 1-sample z test
maxTransDecMaleTest
maxTransDecMaleTest$statistic #X-squared = 15832.46
maxTransDecMaleTest$p.value #p = 0. Decreases in max transcripts happen significantly less than what would be expected by random chance
```



